(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{596:function(s,n,e){"use strict";e.r(n);var a=e(5),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("参考# "),e("a",{attrs:{href:"https://www.cnblogs.com/loveyaxin/p/11151586.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("javascript——原型与原型链"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("###原型\n在创建函数的时候，都会同时为这个函数创建一个prototype属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为constructor属性，指回与之关联的构造函数。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Person() {\n  Person.prototype.name = 'JIN',\n  Person.prototype.age = '18',\n  Person.prototype.sayName = function() {\n    console.log(this.name);\n  }\n  let person1 = new Person();\n  let person2 = new Person();\n  person1.sayName()    // JIN\n  person2.sayName()    //  JIN\n}\n\nconsole.log( person1.__proto__ === Person.prototype ) // true \nconsoe.log(person1.__proto__) \n// age: \"18\"\n// name: \"JIN\"\n// sayName: ƒ ()\n// constructor: ƒ Person()\n// __proto__: Object\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[s._v("如上代码中，Person.ptototype.constructor 就指向 Person\n构造函数和实例原型间的关系：\n"),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/24921360-fb3ef2242dca238e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),s._v(" "),e("p",[s._v("在自定义构造函数时，原型对象默认会获得constructor属性，其他所有方法都继承object，每次调用构造函数的时候都会创建一个新的实例，这个实例内部[[prototype]]特性的标准方式，但是Firefox、Safari和Chrome会在每个对象上暴露_proto_属性，可以通过这个属性来访问对象的原型。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/24921360-8a9a77e6e2666ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),s._v(" "),e("p",[s._v("如上图： Person.prototype === new Person()."),e("strong",[s._v("prototype")])]),s._v(" "),e("p",[s._v("默认情况下，原型对象的constructor的属性都会指向与之关联的构造函数，更新下图。\n"),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/24921360-924961d880c889ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),s._v(" "),e("p",[s._v("###实例与原型\n读取实例的属性的时候，如果找不到该属性，就会去寻找该实例的原型上的属性，如果找不到，继续寻找原型的原型直到最顶层。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Person() {\n\n}\nPerson.prototype.name = 'Jin';\nvar person1 = new Person()\nperson1.name = 'Tong'\n\nconsole.log(person1.name) // Tong\ndelete person1.name;\nconsole.log(person1.name) // Jin\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("###原型的原型\n原型是一个对象，那我们可以通过最原始的创建对象的方式创建原型。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var obj = new object();\nobj.name = 'JIN';\nconsole.log(obj.name) //JIN\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("即原型对象是通过object构造函数生成的\n"),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/24921360-af0cd7e2e9039de9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),s._v(" "),e("p",[s._v("###原型链\n构造函数、原型和实例的关系：\n每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/24921360-2bbce5143a95a8b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Object.prototype.__proto__ === null  // true   null（没有对象，不该有值）\n查找属性的时候查到 Object.prototype 就停止查找\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);