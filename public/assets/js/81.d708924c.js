(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{646:function(t,r,a){"use strict";a.r(r);var e=a(5),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"虚拟-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom"}},[t._v("#")]),t._v(" 虚拟 dom")]),t._v(" "),a("h2",{attrs:{id:"优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势")]),t._v(" "),a("p",[t._v("1、vue 框架引进虚拟 dom 来减少对真实 dom 的操作，从而提高性能。\n对真实的 dom 进行操作时，容易引起回流和重绘。\n虚拟 dom 是对真实 dom 的抽象，在 vue 中使用 render function 生成虚拟节点 VNode，其本质是一个对象\n最后只需要使用 babel 将虚拟 dom 转换为真实的 dom ， 即可展示界面\n2、虚拟 dom 容易实现跨平台，例如渲染在 ssr, native , ssr , webGL 等等")]),t._v(" "),a("h2",{attrs:{id:"虚拟-dom-渲染过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-渲染过程"}},[t._v("#")]),t._v(" 虚拟 dom 渲染过程")]),t._v(" "),a("p",[t._v("1、 编译 template 模板， 使用正则去匹配 指令 class style 等等， 生成 AST\n2、 标记静态节点\n3、 生成 render function , 返回虚拟节点\n4、 虚拟节点转换为真实节点\n5、 浏览器展示")]),t._v(" "),a("h1",{attrs:{id:"三大模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大模块"}},[t._v("#")]),t._v(" 三大模块")]),t._v(" "),a("h2",{attrs:{id:"compiler-编译模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiler-编译模块"}},[t._v("#")]),t._v(" Compiler 编译模块")]),t._v(" "),a("h2",{attrs:{id:"runtime-渲染模块-render-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runtime-渲染模块-render-模块"}},[t._v("#")]),t._v(" RunTime 渲染模块（render 模块）")]),t._v(" "),a("h2",{attrs:{id:"reactivity-响应模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactivity-响应模块"}},[t._v("#")]),t._v(" Reactivity 响应模块")])])}),[],!1,null,null,null);r.default=s.exports}}]);