(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{592:function(t,e,v){"use strict";v.r(e);var _=v(5),s=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"暂存与恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#暂存与恢复"}},[t._v("#")]),t._v(" "),v("strong",[t._v("暂存与恢复")])]),t._v(" "),v("p",[v("code",[t._v("git stash")])]),t._v(" "),v("p",[v("code",[t._v("git stash pop")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"常见命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见命令"}},[t._v("#")]),t._v(" "),v("strong",[t._v("常见命令")])]),t._v(" "),v("p",[v("code",[t._v("$ mkdir test")]),t._v("创建目录")]),t._v(" "),v("p",[v("code",[t._v("$ cd test")]),t._v("进入目录")]),t._v(" "),v("p",[v("code",[t._v("$ pwd")]),t._v("显示当前目录")]),t._v(" "),v("p",[v("code",[t._v("$ dir $ ls")]),t._v("都可查看当前目录的文件")]),t._v(" "),v("p",[v("code",[t._v("$ git init")]),t._v("将当前目录变成Git可以管理的仓库")]),t._v(" "),v("p",[v("code",[t._v("$ git status")]),t._v("查看仓库当前的状态")]),t._v(" "),v("p",[v("code",[t._v("$ git diff")]),t._v("查看具体修改内容")]),t._v(" "),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/24ca5a1d045d14e438b9a40ee7ad0996.webp?x-oss-process=image/format,png"}})]),t._v(" "),v("p",[t._v(".git目录用来跟踪管理版本库 不要乱修改，如果没有可以用ls -ah显示")]),t._v(" "),v("p",[v("strong",[t._v("1. 在目录下建立文件readme.txt   版本1")])]),t._v(" "),v("p",[v("strong",[t._v("2. 向仓库添加文件"),v("code",[t._v("$ git add readme.txt")])])]),t._v(" "),v("p",[v("strong",[t._v("3. 把文件提交到远程仓库"),v("code",[t._v('$ git commit -m "wrote a readme file"')])])]),t._v(" "),v("p",[t._v("tip: 可以添加很多个文件 再一次性提交。")]),t._v(" "),v("p",[v("code",[t._v("$ git log")]),t._v(" 查看历史记录 （由早到晚）")]),t._v(" "),v("p",[v("code",[t._v("$ git log --pretty=oneline")]),t._v("  查看历史记录一行")]),t._v(" "),v("p",[v("code",[t._v("$ git reset --hard head^")]),t._v(" 回退到上一个版本")]),t._v(" "),v("p",[v("code",[t._v("$ git reset --hard b8bdc")]),t._v("  回退到指定版本")]),t._v(" "),v("p",[v("code",[t._v("$ git reflog")]),t._v("  查看命令历史 可以看commit_id")]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"工作区和缓存区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作区和缓存区"}},[t._v("#")]),t._v(" "),v("strong",[t._v("工作区和缓存区")])]),t._v(" "),v("p",[t._v("工作区 "),v("code",[t._v("woking directory")])]),t._v(" "),v("p",[t._v("即我们电脑里能看到的目录，比如之前创建的test文件夹就是一个工作区")]),t._v(" "),v("p",[t._v("工作区有一个隐藏目录 "),v("code",[t._v(".git")]),t._v("， 这个是"),v("code",[t._v("git")]),t._v("的版本库。")]),t._v(" "),v("p",[v("code",[t._v("git")]),t._v("的版本库里存了很多东西，最主要的就是暂存区 "),v("code",[t._v("stage")]),t._v(", 还有"),v("code",[t._v("git")]),t._v("为我们创建的第一个分支"),v("code",[t._v("master")]),t._v("，以及指向"),v("code",[t._v("master")]),t._v("的一个指针叫"),v("code",[t._v("head")])]),t._v(" "),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/a3046d6c8f7b02f27af3bb8325b6d4d9.webp?x-oss-process=image/format,png"}})]),t._v(" "),v("p",[t._v("当我们使用"),v("code",[t._v("$ git add")]),t._v("命令时，实际是把文件添加进了暂存区，然后使用"),v("code",[t._v("$ git commit")]),t._v("将文件提交到当前分支；")]),t._v(" "),v("p",[t._v("当我们创建"),v("code",[t._v("git")]),t._v("版本库时，"),v("code",[t._v("git")]),t._v("自动为我们创建了唯一一个"),v("code",[t._v("master")]),t._v("分支，所以"),v("code",[t._v("$ git commit")]),t._v("就是往master上提交更改")]),t._v(" "),v("p",[v("code",[t._v("$ git checkout --readme.txt")]),t._v(" 撤销修改  使文件回到最近一次"),v("code",[t._v("$ git commit")]),t._v("或"),v("code",[t._v("$ git add")]),t._v("状态")]),t._v(" "),v("p",[v("code",[t._v("$ git reset HEAD readme.txt")]),t._v("  将暂存区的修改撤销，重新放回到工作区，然后在使用"),v("code",[t._v("$ git checkout --readme.txt")])]),t._v(" "),v("hr"),t._v(" "),v("p",[v("code",[t._v("$ git rm test01.txt")])]),t._v(" "),v("p",[t._v("情况一： 确定从版本库中删除该文件，用命令"),v("code",[t._v("$ git rm test01.txt")]),t._v("并且"),v("code",[t._v("commit")])]),t._v(" "),v("p",[t._v("情况二： 删错了 但是版本库里还在  用以下命令还原 "),v("code",[t._v("$ git checkout --test01.txt")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"推送到远程仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#推送到远程仓库"}},[t._v("#")]),t._v(" "),v("strong",[t._v("推送到远程仓库")])]),t._v(" "),v("p",[v("code",[t._v("$ git remote add origin git@github.com:Jin-1999/texedemo.git")])]),t._v(" "),v("p",[v("code",[t._v("$ git remote add origin https://github.com/Jin-1999/texedemo.git")])]),t._v(" "),v("p",[t._v("将本地的"),v("code",[t._v("test")]),t._v("仓库和远程仓库"),v("code",[t._v("texedemo")]),t._v("相关联")]),t._v(" "),v("p",[v("code",[t._v("$ git push -u origin master")]),t._v("将本地库所有内容推送到远程库上")]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"创建与合并分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支"}},[t._v("#")]),t._v(" "),v("strong",[t._v("创建与合并分支")])]),t._v(" "),v("p",[t._v("在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即"),v("code",[t._v("master")]),t._v("分支。"),v("code",[t._v("HEAD")]),t._v("严格来说不是指向提交，而是指向"),v("code",[t._v("master")]),t._v("，"),v("code",[t._v("master")]),t._v("才是指向提交的，所以，"),v("code",[t._v("HEAD")]),t._v("指向的就是当前分支。")]),t._v(" "),v("p",[t._v("一开始的时候，"),v("code",[t._v("master")]),t._v("分支是一条线，Git用"),v("code",[t._v("master")]),t._v("指向最新的提交，再用"),v("code",[t._v("HEAD")]),t._v("指向"),v("code",[t._v("master")]),t._v("，就能确定当前分支，以及当前分支的提交点：")]),t._v(" "),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/a8f03a64a636f26bb1c4c5753bc9bc27.webp?x-oss-process=image/format,png"}})]),t._v(" "),v("p",[t._v("每次提交，"),v("code",[t._v("master")]),t._v("分支都会向前移动一步，这样，随着你不断提交，"),v("code",[t._v("master")]),t._v("分支的线也越来越长。")]),t._v(" "),v("p",[t._v("当我们创建新的分支，例如"),v("code",[t._v("dev")]),t._v("时，Git新建了一个指针叫"),v("code",[t._v("dev")]),t._v("，指向"),v("code",[t._v("master")]),t._v("相同的提交，再把"),v("code",[t._v("HEAD")]),t._v("指向"),v("code",[t._v("dev")]),t._v("，就表示当前分支在"),v("code",[t._v("dev")]),t._v("上：")]),t._v(" "),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/dfd56b9d6e73da52fd38a5e4def5ddc4.webp?x-oss-process=image/format,png"}})]),t._v(" "),v("p",[t._v("你看，Git创建一个分支很快，因为除了增加一个"),v("code",[t._v("dev")]),t._v("指针，改改"),v("code",[t._v("HEAD")]),t._v("的指向，工作区的文件都没有任何变化！")]),t._v(" "),v("p",[t._v("不过，从现在开始，对工作区的修改和提交就是针对"),v("code",[t._v("dev")]),t._v("分支了，比如新提交一次后，"),v("code",[t._v("dev")]),t._v("指针往前移动一步，而"),v("code",[t._v("master")]),t._v("指针不变：")]),t._v(" "),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/f36eef6a76b6447f0385e410ed0c3690.webp?x-oss-process=image/format,png"}})]),t._v(" "),v("p",[t._v("假如我们在"),v("code",[t._v("dev")]),t._v("上的工作完成了，就可以把"),v("code",[t._v("dev")]),t._v("合并到"),v("code",[t._v("master")]),t._v("上。Git怎么合并呢？最简单的方法，就是直接把"),v("code",[t._v("master")]),t._v("指向"),v("code",[t._v("dev")]),t._v("的当前提交，就完成了合并：")]),t._v(" "),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/cb18fc1a7b42611b7cf4348f1e711719.webp?x-oss-process=image/format,png"}})]),t._v(" "),v("p",[t._v("所以"),v("code",[t._v("Git")]),t._v("合并分支也很快！就改改指针，工作区内容也不变！")]),t._v(" "),v("p",[t._v("合并完分支后，甚至可以删除"),v("code",[t._v("dev")]),t._v("分支。删除"),v("code",[t._v("dev")]),t._v("分支就是把"),v("code",[t._v("dev")]),t._v("指针给删掉，删掉后，我们就剩下了一条"),v("code",[t._v("master")]),t._v("分支：\n")]),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/8433831652ff643d66c92ecfe635e747.webp?x-oss-process=image/format,png"}})]),v("p"),t._v(" "),v("h4",{attrs:{id:"实战"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[t._v("#")]),t._v(" "),v("strong",[t._v("实战")]),t._v("：")]),t._v(" "),v("p",[v("code",[t._v("$ git checkout -b dev")]),t._v("创建dev分支，并切换到dev分支")]),t._v(" "),v("p",[t._v("相当于"),v("code",[t._v("$ git branch dev")]),t._v(" "),v("code",[t._v("$ git checkout dev")])]),t._v(" "),v("p",[v("code",[t._v("$ git branch")]),t._v(" 查看分支")]),t._v(" "),v("p",[v("code",[t._v("$ git checkout master")]),t._v(" "),v("code",[t._v("$ git switch master")]),t._v("切换到master分支")]),t._v(" "),v("p",[v("code",[t._v("$ git merge dev")]),t._v(" 合并指定分支到当前分支")]),t._v(" "),v("p",[v("code",[t._v("$ git branch -d dev")]),t._v(" 删除dev分支")]),t._v(" "),v("h3",{attrs:{id:"分支冲突"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支冲突"}},[t._v("#")]),t._v(" "),v("strong",[t._v("分支冲突")])]),t._v(" "),v("p",[t._v("新建一个分支branch111  "),v("code",[t._v("$ git checkout -b branch111")])]),t._v(" "),v("p",[t._v("在test.txt文件里添加一行   添加并上交 "),v("code",[t._v("$ git add test.txt")]),t._v(" "),v("code",[t._v('$ git commit -m "add a word"')])]),t._v(" "),v("p",[t._v("切换回master分支 "),v("code",[t._v("$ git checkout master")])]),t._v(" "),v("p",[t._v("同样在test.txt文件里添加一行  添加并上交  "),v("code",[t._v("$ git add test.txt")]),t._v(" "),v("code",[t._v('$ git commit -m "add a new word"')])]),t._v(" "),v("p",[t._v("合并branch111分支到当前分支"),v("code",[t._v("$ git merge branch111")]),t._v("，此时两个分支进程相同")]),t._v(" "),v("div",{staticClass:"language-git line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-git"}},[v("code",[v("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git merge branch111")]),t._v("\nAuto-merging test.txt\nCONFLICT (content): Merge conflict in test.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br")])]),v("p",[t._v("收到如上提示，手动修改test.txt文件 ，选择保留两次修改，或选择其他")]),t._v(" "),v("p",[t._v("再次提交")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('$ git test.txt` `$ git commit -m "add two news words"\n')])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v("这时候就可以合并了"),v("code",[t._v("$ git merge branch111")]),t._v("  合并后删除分支 "),v("code",[t._v("$ git branch -d branch111")])]),t._v(" "),v("p",[v("code",[t._v("$ git log")]),t._v(" 可以查看分支情况")]),t._v(" "),v("h3",{attrs:{id:"分支管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" "),v("strong",[t._v("分支管理")])]),t._v(" "),v("p",[t._v("通常在合并分支的时候，如果可能git会使用fast forward模式，这种模式下，一旦删除分支后就会丢掉分支信息，如果强制禁用fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。")]),t._v(" "),v("p",[t._v("在合并的时候加上参数 "),v("code",[t._v("$ git merge -no-ff branch111")])]),t._v(" "),v("p",[t._v("如果不适用fast forward模式的话，merge后就是这个样")]),t._v(" "),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/6aaba1b1dbf9df05a32a28770f4828f3.webp?x-oss-process=image/format,png"}})]),t._v(" "),v("h4",{attrs:{id:"bug分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bug分支"}},[t._v("#")]),t._v(" "),v("strong",[t._v("Bug分支")])]),t._v(" "),v("p",[t._v("将当前工作内容存储起来"),v("code",[t._v("$ git stash")])]),t._v(" "),v("p",[t._v("恢复工作内容 "),v("code",[t._v("$ git stash apply")]),t._v("  删除stash内容 "),v("code",[t._v("$git stash drop")])]),t._v(" "),v("p",[t._v("合并写法 "),v("code",[t._v("$ git stash pop")])]),t._v(" "),v("p",[t._v("master分支上修复bug")]),t._v(" "),v("p",[t._v("dev分支是在bug处之后分出来的话，说明也有同样的bug")]),t._v(" "),v("p",[t._v("修复dev上同样的bug可以使用"),v("code",[t._v("$ git cherry-pick <commit>")])]),t._v(" "),v("h4",{attrs:{id:"feature分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#feature分支"}},[t._v("#")]),t._v(" "),v("strong",[t._v("Feature分支")])]),t._v(" "),v("p",[t._v("添加一个新功能的时候，就创建一个feature分支，在上面开发，合并，删除；")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("$ git checkout -b feature1\n$ git add file\n$ git commit -m '' ''\n$ git checkout dev \n$ git merge -no-ff feature1\n$ git branch -d feature1\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br")])]),v("h3",{attrs:{id:"多人协作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" "),v("strong",[t._v("多人协作")])]),t._v(" "),v("p",[t._v("当我们从远处仓库克隆的时候，实际上git自动把本地的master分支和远程的master分支对应起来了，并且远程仓库的默认名称是origin。")]),t._v(" "),v("p",[v("code",[t._v("$ git remote -v")]),t._v(" 查看远程库的信息")]),t._v(" "),v("p",[v("code",[t._v("$ git push origin master")]),t._v(" 推送分支")]),t._v(" "),v("p",[t._v("例： 另一名同事从远程库克隆，他要在dev分支开发，就得创建远程origin的dev再发送  到本地上 "),v("code",[t._v("$ git checkout -b dev origin/dev")])]),t._v(" "),v("p",[t._v("然后他不断修改并推送 "),v("code",[t._v("$ git add file")]),t._v(" "),v("code",[t._v('$ git commit -m "***"')]),t._v(" "),v("code",[t._v("$ git push origin dev")])]),t._v(" "),v("p",[t._v("在这时候你也对同样的文件作了修改，并试图推送，会推送失败，并提示先用"),v("code",[t._v("$ git pull")]),t._v("把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送")]),t._v(" "),v("p",[t._v("但是我们还需要将本地的dev和远程origin/dev连接起来 "),v("code",[t._v("$ git branch --set-upstream-to=origin/dev dev")]),t._v(" 再使用"),v("code",[t._v("$ git pull")]),t._v(" 手动解决冲突后，再提交，再push")]),t._v(" "),v("p",[t._v("多人协作通常模式：")]),t._v(" "),v("p",[t._v("1.首先，可以试图用git push origin '<branch-name>' 推送自己的修改；")]),t._v(" "),v("p",[t._v("2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；")]),t._v(" "),v("p",[t._v("如果合并有冲突，则解决冲突，并在本地提交；")]),t._v(" "),v("p",[t._v("3.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！")]),t._v(" "),v("p",[t._v("4.如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。")]),t._v(" "),v("p",[v("strong",[t._v("## 标签管理")])]),t._v(" "),v("p",[t._v("首先切换到需要打标签的分支上，然后使用命令"),v("code",[t._v("$ git tag<name>")]),t._v(" 就可以打一个标签")]),t._v(" "),v("p",[t._v("然后使用"),v("code",[t._v("$ git tag")]),t._v("查看标签\n")]),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/fd1e6066cfc44d6ebfe9da8781e45a58.webp?x-oss-process=image/format,png"}})]),v("p"),t._v(" "),v("p",[t._v("默认标签是打在最新提交的commit上，之前需要打标签的话，需要找到它的commit id\n")]),v("div",{staticStyle:{display:"flex","justify-content":"center"}},[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/453b8f23c5a18a6547875aaa3bb86b3e.webp?x-oss-process=image/format,png"}})]),v("p"),t._v(" "),v("p",[v("code",[t._v("$ git show <tagname>")]),t._v(" 可以查看标签的信息")]),t._v(" "),v("h4",{attrs:{id:"标签的一些操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标签的一些操作"}},[t._v("#")]),t._v(" "),v("strong",[t._v("标签的一些操作")])]),t._v(" "),v("p",[t._v("删除标签  "),v("code",[t._v("$ git tag-d v0.9")])]),t._v(" "),v("p",[t._v("创建的标签都只存储在本地，不会自动推送到远程，所以打错的标签可以在本地安全删除，如果我们要推送某个标签到远程的话，可以使用命令"),v("code",[t._v("$ git push origin <tagname>")])]),t._v(" "),v("p",[t._v("或者一次性推送全部"),v("code",[t._v("$ fit push origin --tags")])]),t._v(" "),v("p",[t._v("如果标签已经推送到远程库，然后想要删除的话")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("删除本地  "),v("code",[t._v("$ git tag -d v0.9")])])]),t._v(" "),v("li",[v("p",[t._v("远程删除 "),v("code",[t._v("$ git push origin :refs/tags/v0.9")])])])]),t._v(" "),v("hr"),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考廖雪峰的官方网站"),v("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);